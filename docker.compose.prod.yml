# docker-compose.prod.yml
# for PRODUCTION deployment on SERVER

version: '3.8'
services:
  nginx:
    build: 
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  backend:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_SCHEMA: main
      COMPOSE_FORCE_DOWNLOAD: "true"
    volumes:
      - model_data:/app/node_modules/@xenova/transformers/models
      - pip_cache:/pip_cache
      - venv_data:/app/venv
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  model_data:
  pip_cache:
  venv_data: